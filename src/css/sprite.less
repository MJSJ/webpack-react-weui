/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@close-name: close;
@close-x: 137px;
@close-y: 97px;
@close-offset-x: -137px;
@close-offset-y: -97px;
@close-width: 46px;
@close-height: 45px;
@close-total-width: 218px;
@close-total-height: 203px;
@close-image: '../img/sprite.png';
@close: 137px 97px -137px -97px 46px 45px 218px 203px '../img/sprite.png' close;
@cloud-name: cloud;
@cloud-x: 0px;
@cloud-y: 97px;
@cloud-offset-x: 0px;
@cloud-offset-y: -97px;
@cloud-width: 137px;
@cloud-height: 49px;
@cloud-total-width: 218px;
@cloud-total-height: 203px;
@cloud-image: '../img/sprite.png';
@cloud: 0px 97px 0px -97px 137px 49px 218px 203px '../img/sprite.png' cloud;
@saucer-name: saucer;
@saucer-x: 0px;
@saucer-y: 0px;
@saucer-offset-x: 0px;
@saucer-offset-y: 0px;
@saucer-width: 218px;
@saucer-height: 97px;
@saucer-total-width: 218px;
@saucer-total-height: 203px;
@saucer-image: '../img/sprite.png';
@saucer: 0px 0px 0px 0px 218px 97px 218px 203px '../img/sprite.png' saucer;
@sohu-name: sohu;
@sohu-x: 0px;
@sohu-y: 146px;
@sohu-offset-x: 0px;
@sohu-offset-y: -146px;
@sohu-width: 114px;
@sohu-height: 57px;
@sohu-total-width: 218px;
@sohu-total-height: 203px;
@sohu-image: '../img/sprite.png';
@sohu: 0px 146px 0px -146px 114px 57px 218px 203px '../img/sprite.png' sohu;
@spritesheet-width: 218px;
@spritesheet-height: 203px;
@spritesheet-image: '../img/sprite.png';
@spritesheet-sprites: @close @cloud @saucer @sohu;
@spritesheet: 218px 203px '../img/sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite-size() {
  background-size: @spritesheet-width;
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
  .sprite-size();
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: extract(@sprite, 10);
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
